import javax.swing.*; 
import java.awt.*; 
import java.awt.event.ActionEvent; 
import java.awt.event.ActionListener; 
import java.util.ArrayList; 
import java.util.HashMap; 
import java.util.List; 
import java.util.Map; 
public class CurrencyConverter extends JFrame { 
    private JComboBox<String> fromCurrency, toCurrency; 
    private JTextField amountField; 
    private JLabel resultLabel; 
    private Map<String, Double> exchangeRates; 
    private Map<String, String> currencyUnits; 
    private JTextArea historyArea; 
    private boolean isDarkMode = false; 
    public CurrencyConverter() { 
        setTitle("Currency Converter"); 
        setSize(500, 350); 
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        setLayout(new GridLayout(7, 2, 10, 10)); 
 
        exchangeRates = new HashMap<>(); 
        exchangeRates.put("India", 82.75); 
        exchangeRates.put("USA", 1.0); 
        exchangeRates.put("London", 0.78); 
        exchangeRates.put("Dubai", 3.67); 
        exchangeRates.put("Thailand", 36.50); 
 
        currencyUnits = new HashMap<>(); 
        currencyUnits.put("India", "INR"); 
        currencyUnits.put("USA", "USD"); 
        currencyUnits.put("London", "GBP"); 
        currencyUnits.put("Dubai", "AED"); 
        currencyUnits.put("Thailand", "THB"); 
 
        add(new JLabel("Amount:")); 
        amountField = new JTextField(); 
        add(amountField); 
 
        add(new JLabel("From:")); 
        fromCurrency = new JComboBox<>(exchangeRates.keySet().toArray(new 
String[0])); 
        add(fromCurrency); 
 
        add(new JLabel("To:")); 
        toCurrency = new JComboBox<>(exchangeRates.keySet().toArray(new 
String[0])); 
        add(toCurrency); 
 
        JButton swapButton = new JButton("Swap"); 
        swapButton.addActionListener(e -> swapCurrencies()); 
        add(swapButton); 
 
        JButton convertButton = new JButton("Convert"); 
        add(convertButton); 
 
        resultLabel = new JLabel("Converted Amount: "); 
        add(resultLabel); 
 
        historyArea = new JTextArea(5, 20); 
        historyArea.setEditable(false); 
        add(new JScrollPane(historyArea)); 
 
        JButton resetButton = new JButton("Reset"); 
        resetButton.addActionListener(e -> resetFields()); 
        add(resetButton); 
 
        JButton darkModeButton = new JButton("Toggle Dark Mode"); 
        darkModeButton.addActionListener(e -> toggleDarkMode()); 
        add(darkModeButton); 
 
        JButton closeButton = new JButton("Close"); 
        closeButton.addActionListener(e -> dispose()); 
        add(closeButton); 
 
        convertButton.addActionListener(new ConvertActionListener()); 
        setVisible(true); 
    } 
 
    private class ConvertActionListener implements ActionListener { 
        @Override 
        public void actionPerformed(ActionEvent e) { 
            new Thread(new CurrencyConversionTask()).start(); 
        } 
    } 
 
    private class CurrencyConversionTask implements Runnable { 
        @Override 
        public void run() { 
            try { 
                double amount = Double.parseDouble(amountField.getText()); 
                String from = (String) fromCurrency.getSelectedItem(); 
                String to = (String) toCurrency.getSelectedItem(); 
 
                if (amount <= 0) { 
                    throw new IllegalArgumentException("Amount must be greater 
than zero."); 
                } 
 
                double convertedAmount = (amount / exchangeRates.get(from)) * 
exchangeRates.get(to); 
                String toUnit = currencyUnits.get(to); 
 
                SwingUtilities.invokeLater(() -> { 
                    resultLabel.setText("Converted Amount: " + String.format("%.2f", 
convertedAmount) + " " + toUnit); 
                    historyArea.append(amount + " " + currencyUnits.get(from) + " = " 
+ String.format("%.2f", convertedAmount) + " " + toUnit + "\n"); 
                }); 
            } catch (NumberFormatException ex) { 
                SwingUtilities.invokeLater(() -> 
JOptionPane.showMessageDialog(CurrencyConverter.this, "Please enter a valid 
number", "Error", JOptionPane.ERROR_MESSAGE)); 
            } catch (IllegalArgumentException ex) { 
                SwingUtilities.invokeLater(() -> 
JOptionPane.showMessageDialog(CurrencyConverter.this, ex.getMessage(), 
"Error", JOptionPane.ERROR_MESSAGE)); 
            } 
        } 
    } 
    private void swapCurrencies() { 
        String from = (String) fromCurrency.getSelectedItem(); 
        String to = (String) toCurrency.getSelectedItem(); 
        fromCurrency.setSelectedItem(to); 
        toCurrency.setSelectedItem(from); 
    } 
 
    private void resetFields() { 
        amountField.setText(""); 
        resultLabel.setText("Converted Amount: "); 
        historyArea.setText(""); 
        fromCurrency.setSelectedIndex(0); 
        toCurrency.setSelectedIndex(0); 
    } 
 
    private void toggleDarkMode() { 
        isDarkMode = !isDarkMode; 
        Color bgColor = isDarkMode ? Color.DARK_GRAY : Color.WHITE; 
        Color fgColor = isDarkMode ? Color.WHITE : Color.BLACK; 
        getContentPane().setBackground(bgColor); 
 
        for (Component c : getContentPane().getComponents()) { 
            c.setBackground(bgColor); 
            c.setForeground(fgColor); 
        } 
    } 
 
    public static void main(String[] args) { 
        new CurrencyConverter(); 
    } 
} 
